/*The program must accept a string S as the input. The program must print the number of ways to split the string into two parts so that both parts have the same alphabets.

Boundary Condition(s):
1 <= Length of S <= 100

Input Format:
The first line contains a string S.

Output Format:
The first line contains the number of ways to split the string into two parts so that both parts have the same alphabets.

Example Input/Output 1:
Input:
bbbb

Output:
3

Explanation:
The number of ways the string bbbb can be split into two parts are {b, bbb}, {bb, bb}, {bbb, b}.
Hence the output is 3.

Example Input/Output 2:
Input:
acaca

Output:
2

Explanation:
The first way in which the string acaca can be split into two parts is {a, caca}. The two parts do not contain the same alphabets.
The second way in which the string acaca can be split into two parts is {ac, aca}. The two parts contain the same alphabets. 
The third way in which the string acaca can be split into two parts is {aca, ca}. The two parts contain the same alphabets.
The fourth way in which the string acaca can be split into two parts is {acac, a}. The two parts do not contain the same alphabets.
There are two possible ways to split the string contain the same alphabets.
Hence the output is 2
*/


#include<stdio.h>
#include <stdlib.h>

int main()
{
    char s[100];
    scanf("%s",s);
    int r[26]={0},l[26]={0},len=strlen(s),ways=0,i;
    for(i=0;i<len;i++){
        r[s[i]-'a']++;
    }
    i=1;
    while(i<len){
        l[s[i-1]-'a']++;
        r[s[i-1]-'a']--;
        int flag=1;
        for(int a=0;a<=25;a++){
            if(!((l[a]==0 && r[a]==0)|| (l[a]>0 && r[a]>0))){
                flag=0;
            }
        }
        if(flag){
            ways++;
        }
        i++;
    }
    printf("%d",ways);
}
